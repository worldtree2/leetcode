public class Solution {
    public ArrayList<Integer> findSubstring(String S, String[] L) {
        ArrayList<Integer> result = new ArrayList<Integer>();
        HashMap<String, Integer> toFind = new HashMap<String, Integer>();//First HashMap to store each word in L
        HashMap<String, Integer> found = new HashMap<String, Integer>();//Second HashMap to add each new word found during
        int m = L.length, n = L[0].length();                            //each loop
        for (int i = 0; i < m; i ++){                                   //First loop to add each word from L into the HashMap
            if (!toFind.containsKey(L[i])){                             
                toFind.put(L[i], 1);
            }
            else{
                toFind.put(L[i], toFind.get(L[i]) + 1);                 //If the L contains the same word more than once, stores
            }                                                           //how many time it show up in L.
        }
        for (int i = 0; i <= S.length() - n * m; i ++){                 //Loop through String s,each time take a word and check 
            found.clear();                                              //if hash map 'toFind' contains it or not, if not, break
            int j;                                                      //the loop.
            for (j = 0; j < m; j ++){
                int k = i + j * n;
                String stub = S.substring(k, k + n);
                if (!toFind.containsKey(stub)) break;
                if(!found.containsKey(stub)){
                    found.put(stub, 1);
                }
                else{
                    found.put(stub, found.get(stub) + 1);
                }
                if (found.get(stub) > toFind.get(stub)) break;
            }
            if (j == m) result.add(i);                                  //After the inner loop, if the loop is finished, then 
        }                                                               //add the result to the result set.
        return result; 
    }
}
